import email
from email.mime.text import MIMEText
from http.client import OK
import os
import re
from django.shortcuts import render, redirect
from accounts.serializers import UserSerializer

from dj_rest_auth.registration.views import SocialLoginView
from allauth.socialaccount.providers.oauth2.client import OAuth2Client
from allauth.socialaccount.providers.google import views as google_view
from rest_framework_simplejwt.serializers import RefreshToken
from django.template.loader import render_to_string
from django.core.mail import send_mail
from django.conf import settings

from json import JSONDecodeError
from django.http import HttpResponse, JsonResponse
import requests
from rest_framework import status
from .models import *
from allauth.socialaccount.models import SocialAccount

from django.core.mail import EmailMessage

from rest_framework.views import APIView

import uuid

BASE_URL = 'http://localhost:8000/'
GOOGLE_CALLBACK_URI = BASE_URL + 'api/accounts/google/callback/'

# request -> code, access token

# access ÏûàÏùÑÎïå -> ÏÜåÏÖúÎ°úÍ∑∏Ïù∏ O, ÌöåÏõêÍ∞ÄÏûÖ X / Î°úÍ∑∏Ïù∏
# access ÏóÜÏùÑ Îïå -> ÏßÑÏßú Ï≤òÏùå ÏÜåÏÖúÎ°úÍ∑∏Ïù∏ ('')

# access token & Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏöîÏ≤≠ -> ÌöåÏõêÍ∞ÄÏûÖ / Î°úÍ∑∏Ïù∏ + jwt ÌÜ†ÌÅ∞ Î∞úÍ∏â
def google_callback(request):
    client_id = '312850794943-rogubu1don9b5fgn7tjf4jrf4ri98vcs.apps.googleusercontent.com'
    client_secret = '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'
    code = request.GET.get('code')
    state = 'state_parameter_passthrough_value'
    access_token = request.data['access_token']
    
    if access_token == None:
        # ÏïÑÏòà Ï≤òÏùå ÏÜåÏÖúÎ°úÍ∑∏Ïù∏ ÌïòÎäî ÏÇ¨Îûå -> Íµ¨Í∏ÄÏóê ÏöîÏ≤≠ ÌïÑÏöî
        # 1. Î∞õÏùÄ ÏΩîÎìúÎ°ú Íµ¨Í∏ÄÏóê access token ÏöîÏ≤≠
        token_req = requests.post(f"https://oauth2.googleapis.com/token?client_id={client_id}&client_secret={client_secret}&code={code}&grant_type=authorization_code&redirect_uri={GOOGLE_CALLBACK_URI}&state={state}")
        
        ### 1-1. jsonÏúºÎ°ú Î≥ÄÌôò & ÏóêÎü¨ Î∂ÄÎ∂Ñ ÌååÏã±
        token_req_json = token_req.json()
        error = token_req_json.get("error")

        ### 1-2. ÏóêÎü¨ Î∞úÏÉù Ïãú Ï¢ÖÎ£å
        if error is not None:
            raise JSONDecodeError(error)

        ### 1-3. ÏÑ±Í≥µ Ïãú access_token Í∞ÄÏ†∏Ïò§Í∏∞
        access_token = token_req_json.get('access_token')

    #################################################################
    
    # Í∞ÄÏ†∏Ïò® access_tokenÏúºÎ°ú Ïù¥Î©îÏùºÍ∞íÏùÑ Íµ¨Í∏ÄÏóê ÏöîÏ≤≠
    email_req = requests.get(f"https://www.googleapis.com/oauth2/v1/tokeninfo?access_token={access_token}")
    email_req_status = email_req.status_code

    ### 2-1. ÏóêÎü¨ Î∞úÏÉù Ïãú 400 ÏóêÎü¨ Î∞òÌôò
    if email_req_status != 200:
        return JsonResponse({'err_msg': 'failed to get email'}, status=status.HTTP_400_BAD_REQUEST)
    
    ### 2-2. ÏÑ±Í≥µ Ïãú Ïù¥Î©îÏùº Í∞ÄÏ†∏Ïò§Í∏∞
    email_req_json = email_req.json()
    email = email_req_json.get('email')

    # return JsonResponse({'access': access_token, 'email':email})

    #################################################################

    # Ï†ÑÎã¨Î∞õÏùÄ Ïù¥Î©îÏùº, access_token, codeÎ•º Î∞îÌÉïÏúºÎ°ú ÌöåÏõêÍ∞ÄÏûÖ/Î°úÍ∑∏Ïù∏
    try:
        # Ï†ÑÎã¨Î∞õÏùÄ Ïù¥Î©îÏùºÎ°ú Îì±Î°ùÎêú Ïú†Ï†ÄÍ∞Ä ÏûàÎäîÏßÄ ÌÉêÏÉâ
        user = User.objects.get(email=email)
        
        if user.is_active == False:
            # active ÏïàÎêúÍ±∞Î©¥ -> ÏÜåÏÖúÎ°úÍ∑∏Ïù∏ÏùÄ ÌñàÎäîÎç∞, ÌöåÏõê Í∞ÄÏûÖ ÏïàÌïú ÏÇ¨Îûå
            return JsonResponse({
                'is_active' : user.is_active
            })
        
        # Í∏∞ ÏÇ¨Ïö©Ïûê => Î°úÍ∑∏Ïù∏ & Ìï¥Îãπ Ïú†Ï†ÄÏùò jwt Î∞úÍ∏â
        data = {'access_token': access_token, 'code': code}
        accept = requests.post(f"{BASE_URL}api/accounts/google/login/finish/", data=data)
        accept_status = accept.status_code

        # Î≠îÍ∞Ä Ï§ëÍ∞ÑÏóê Î¨∏Ï†úÍ∞Ä ÏÉùÍ∏∞Î©¥ ÏóêÎü¨
        if accept_status != 200:
            return JsonResponse({'err_msg': 'failed to signin'}, status=accept_status)

        accept_json = accept.json()
        accept_json.pop('user', None)
        
        return JsonResponse(accept_json)
    
    except User.DoesNotExist:
        # Ï†ÑÎã¨Î∞õÏùÄ Ïù¥Î©îÏùºÎ°ú Í∏∞Ï°¥Ïóê Í∞ÄÏûÖÎêú Ïú†Ï†ÄÍ∞Ä ÏïÑÏòà ÏóÜÏúºÎ©¥ => ÏÉàÎ°ú ÌöåÏõêÍ∞ÄÏûÖ & Ìï¥Îãπ Ïú†Ï†ÄÏùò jwt Î∞úÍ∏â
        # Ïù¥Îïå likelion & cau Î©îÏùº Ïù∏Ï¶ù ÌïÑÏöî
        
        # Ïù¥Î©îÏùºÏù¥ @likelion.org ÏïÑÎãå Í≤ΩÏö∞ : status code, ÏóêÎü¨Î°ú Ï≤òÎ¶¨
        if email.split('@')[1] != 'likelion.org':
            return JsonResponse({'err_msg' : 'no matching likelion'}, status=status.HTTP_400_BAD_REQUEST)
        
        data = {'access_token': access_token, 'code': code}
        accept = requests.post(f"{BASE_URL}api/accounts/google/login/finish/", data=data)
        accept_status = accept.status_code

        # Î≠îÍ∞Ä Ï§ëÍ∞ÑÏóê Î¨∏Ï†úÍ∞Ä ÏÉùÍ∏∞Î©¥ ÏóêÎü¨
        if accept_status != 200:
            return JsonResponse({'err_msg': 'failed to signup'}, status=accept_status)

        accept_json = accept.json()
        accept_json.pop('user', None)

        save_token(email, accept_json)
        
        return JsonResponse({
            'data' : accept_json,
            'is_active' : user.is_active
        })

# ÌÜ†ÌÅ∞ Ï†ÄÏû•
def save_token(email, token):
    user = User.objects.get(email=email)
    user.access_token = token.get('access_token')
    user.refresh_token = token.get('refresh_token')
    user.save()

# Íµ¨Í∏Ä ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î∑∞
class GoogleLogin(SocialLoginView):
    adapter_class = google_view.GoogleOAuth2Adapter
    callback_url = GOOGLE_CALLBACK_URI
    client_class = OAuth2Client

# Ïù∏Ï¶ùÏΩîÎìú uuid ÏÉùÏÑ±
def create_code():
    result = str(uuid.uuid1())
    return result

# ÌïôÍµê Î©îÏùº Ïù∏Ï¶ù
def cau_authentication(request):
    text_title = '[Ï§ëÏïôÎåÄ Î©ãÏÇ¨] ÌïôÍµê Í≥ÑÏ†ï ÌôïÏù∏ Î©îÏùº ü¶Å'
    global code
    code = create_code()
    html_content = render_to_string('accounts/mail_template.html', {
        "code":code
    })
    to_email = request.data['email']
    subject = "Ï†úÎ™©"
    content = "ÎÇ¥Ïö©"
    sender_email = settings.EMAIL_HOST_USER
    send_mail(subject, content, sender_email, [to_email], html_message=html_content)
    return code


# Ï¥àÍ∏∞ ÏÇ¨Ïö©Ïûê (is_active = False) ÌöåÏõê Ï†ïÎ≥¥ ÏûÖÎ†• (patch)
# Í∏∞ÏÇ¨Ïö©Ïûê (is_active = True) ÌöåÏõê Ï†ïÎ≥¥ return


# Ï∂îÍ∞Ä Ï†ïÎ≥¥ Í∏∞ÏûÖ
class UserView(APIView):

# Ï¥àÍ∏∞ ÏÇ¨Ïö©Ïûê -> ÌöåÏõê Ï†ïÎ≥¥ ÎÑòÏñ¥Ïò® Îç∞Ïù¥ÌÑ∞Î°ú update
    def patch(self, request):
        token = request.META.get('HTTP_AUTHORIZATION')
        user = User.objects.get(access_token=token)
        
        if user.is_active == False:
            user.name = request.data['name']
            user.generation = request.data['generation']
            user.track = request.data['track']
            user.is_admin = request.data['is_admin']
            user.is_active = True
            user.save()
            
        return JsonResponse({
            'name':user.name,
            'generation':user.generation,
            'track':user.track,
            'is_admin':user.is_admin,
        })

# Í∏∞ÏÇ¨Ïö©Ïûê -> ÌöåÏõê Ï†ïÎ≥¥ return
    def get(self, request):
        token = request.META.get('HTTP_AUTHORIZATION')
        user = User.objects.get(access_token=token)
        
        if user.is_active == True:
            return JsonResponse({
                'name' : user.name,
                'generation' : user.generation,
                'track' : user.track,
                'is_admin' : user.is_admin
            })

class CauMailView(APIView):
    
    def get(self, request):
        code = cau_authentication(request)
        token = request.META.get('HTTP_AUTHORIZATION')
        print(token)
        user = User.objects.get(access_token = token)
        user.code = code
        user.save()
        return JsonResponse({
            'code':code,
        }, safe=False)
    
    def post(self, request):
        token = request.META.get('HTTP_AUTHORIZATION')
        code = User.objects.get(access_token = token).code
        if request.data['code'] != code:
            return JsonResponse('False', safe=False)
        return JsonResponse('True', safe=False)
